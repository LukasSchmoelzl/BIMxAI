// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class QueryResult {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):QueryResult {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsQueryResult(bb:flatbuffers.ByteBuffer, obj?:QueryResult):QueryResult {
  return (obj || new QueryResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsQueryResult(bb:flatbuffers.ByteBuffer, obj?:QueryResult):QueryResult {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new QueryResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

entityType():string|null
entityType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entityType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

expressIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

expressIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

expressIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

queryTimeMs():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startQueryResult(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEntityType(builder:flatbuffers.Builder, entityTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, entityTypeOffset, 0);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(1, count, 0);
}

static addExpressIds(builder:flatbuffers.Builder, expressIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, expressIdsOffset, 0);
}

static createExpressIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createExpressIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createExpressIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startExpressIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addQueryTimeMs(builder:flatbuffers.Builder, queryTimeMs:number) {
  builder.addFieldInt32(3, queryTimeMs, 0);
}

static endQueryResult(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createQueryResult(builder:flatbuffers.Builder, entityTypeOffset:flatbuffers.Offset, count:number, expressIdsOffset:flatbuffers.Offset, queryTimeMs:number):flatbuffers.Offset {
  QueryResult.startQueryResult(builder);
  QueryResult.addEntityType(builder, entityTypeOffset);
  QueryResult.addCount(builder, count);
  QueryResult.addExpressIds(builder, expressIdsOffset);
  QueryResult.addQueryTimeMs(builder, queryTimeMs);
  return QueryResult.endQueryResult(builder);
}
}
