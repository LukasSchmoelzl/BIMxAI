// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CacheValueType } from './cache-value-type';


export class CacheIndexEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CacheIndexEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCacheIndexEntry(bb:flatbuffers.ByteBuffer, obj?:CacheIndexEntry):CacheIndexEntry {
  return (obj || new CacheIndexEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCacheIndexEntry(bb:flatbuffers.ByteBuffer, obj?:CacheIndexEntry):CacheIndexEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CacheIndexEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

fileOffset():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

sizeBytes():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

expiresAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

valueType():CacheValueType {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CacheValueType.CLAUDE_REQUEST;
}

static startCacheIndexEntry(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addFileOffset(builder:flatbuffers.Builder, fileOffset:bigint) {
  builder.addFieldInt64(1, fileOffset, BigInt('0'));
}

static addSizeBytes(builder:flatbuffers.Builder, sizeBytes:number) {
  builder.addFieldInt32(2, sizeBytes, 0);
}

static addExpiresAt(builder:flatbuffers.Builder, expiresAt:bigint) {
  builder.addFieldInt64(3, expiresAt, BigInt('0'));
}

static addValueType(builder:flatbuffers.Builder, valueType:CacheValueType) {
  builder.addFieldInt8(4, valueType, CacheValueType.CLAUDE_REQUEST);
}

static endCacheIndexEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCacheIndexEntry(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, fileOffset:bigint, sizeBytes:number, expiresAt:bigint, valueType:CacheValueType):flatbuffers.Offset {
  CacheIndexEntry.startCacheIndexEntry(builder);
  CacheIndexEntry.addKey(builder, keyOffset);
  CacheIndexEntry.addFileOffset(builder, fileOffset);
  CacheIndexEntry.addSizeBytes(builder, sizeBytes);
  CacheIndexEntry.addExpiresAt(builder, expiresAt);
  CacheIndexEntry.addValueType(builder, valueType);
  return CacheIndexEntry.endCacheIndexEntry(builder);
}
}
