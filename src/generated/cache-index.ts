// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CacheIndexEntry } from './cache-index-entry';


export class CacheIndex {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CacheIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCacheIndex(bb:flatbuffers.ByteBuffer, obj?:CacheIndex):CacheIndex {
  return (obj || new CacheIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCacheIndex(bb:flatbuffers.ByteBuffer, obj?:CacheIndex):CacheIndex {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CacheIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

entries(index: number, obj?:CacheIndexEntry):CacheIndexEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CacheIndexEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

entriesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

totalSize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

entryCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 1;
}

static startCacheIndex(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addEntries(builder:flatbuffers.Builder, entriesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, entriesOffset, 0);
}

static createEntriesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEntriesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTotalSize(builder:flatbuffers.Builder, totalSize:bigint) {
  builder.addFieldInt64(1, totalSize, BigInt('0'));
}

static addEntryCount(builder:flatbuffers.Builder, entryCount:number) {
  builder.addFieldInt32(2, entryCount, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(3, version, 1);
}

static endCacheIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCacheIndex(builder:flatbuffers.Builder, entriesOffset:flatbuffers.Offset, totalSize:bigint, entryCount:number, version:number):flatbuffers.Offset {
  CacheIndex.startCacheIndex(builder);
  CacheIndex.addEntries(builder, entriesOffset);
  CacheIndex.addTotalSize(builder, totalSize);
  CacheIndex.addEntryCount(builder, entryCount);
  CacheIndex.addVersion(builder, version);
  return CacheIndex.endCacheIndex(builder);
}
}
