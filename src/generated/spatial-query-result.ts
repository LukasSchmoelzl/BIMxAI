// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { SpatialQuery } from './spatial-query';


export class SpatialQueryResult {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpatialQueryResult {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpatialQueryResult(bb:flatbuffers.ByteBuffer, obj?:SpatialQueryResult):SpatialQueryResult {
  return (obj || new SpatialQueryResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpatialQueryResult(bb:flatbuffers.ByteBuffer, obj?:SpatialQueryResult):SpatialQueryResult {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpatialQueryResult()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

query(obj?:SpatialQuery):SpatialQuery|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SpatialQuery()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

entityIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

entityIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

entityIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

distances(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

distancesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

distancesArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

nodesVisited():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

timeMs():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startSpatialQueryResult(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addQuery(builder:flatbuffers.Builder, queryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, queryOffset, 0);
}

static addEntityIds(builder:flatbuffers.Builder, entityIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, entityIdsOffset, 0);
}

static createEntityIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createEntityIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createEntityIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startEntityIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDistances(builder:flatbuffers.Builder, distancesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, distancesOffset, 0);
}

static createDistancesVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDistancesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDistancesVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startDistancesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addNodesVisited(builder:flatbuffers.Builder, nodesVisited:number) {
  builder.addFieldInt32(3, nodesVisited, 0);
}

static addTimeMs(builder:flatbuffers.Builder, timeMs:number) {
  builder.addFieldFloat32(4, timeMs, 0.0);
}

static endSpatialQueryResult(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSpatialQueryResult(builder:flatbuffers.Builder, queryOffset:flatbuffers.Offset, entityIdsOffset:flatbuffers.Offset, distancesOffset:flatbuffers.Offset, nodesVisited:number, timeMs:number):flatbuffers.Offset {
  SpatialQueryResult.startSpatialQueryResult(builder);
  SpatialQueryResult.addQuery(builder, queryOffset);
  SpatialQueryResult.addEntityIds(builder, entityIdsOffset);
  SpatialQueryResult.addDistances(builder, distancesOffset);
  SpatialQueryResult.addNodesVisited(builder, nodesVisited);
  SpatialQueryResult.addTimeMs(builder, timeMs);
  return SpatialQueryResult.endSpatialQueryResult(builder);
}
}
