// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ChunkLoadResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChunkLoadResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunkLoadResponse(bb:flatbuffers.ByteBuffer, obj?:ChunkLoadResponse):ChunkLoadResponse {
  return (obj || new ChunkLoadResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunkLoadResponse(bb:flatbuffers.ByteBuffer, obj?:ChunkLoadResponse):ChunkLoadResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChunkLoadResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

loadedChunks(index: number):string
loadedChunks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
loadedChunks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

loadedChunksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

failedChunks(index: number):string
failedChunks(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
failedChunks(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

failedChunksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

memoryUsage():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

loadTimeMs():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startChunkLoadResponse(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addLoadedChunks(builder:flatbuffers.Builder, loadedChunksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, loadedChunksOffset, 0);
}

static createLoadedChunksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLoadedChunksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFailedChunks(builder:flatbuffers.Builder, failedChunksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, failedChunksOffset, 0);
}

static createFailedChunksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startFailedChunksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMemoryUsage(builder:flatbuffers.Builder, memoryUsage:bigint) {
  builder.addFieldInt64(2, memoryUsage, BigInt('0'));
}

static addLoadTimeMs(builder:flatbuffers.Builder, loadTimeMs:number) {
  builder.addFieldInt32(3, loadTimeMs, 0);
}

static endChunkLoadResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChunkLoadResponse(builder:flatbuffers.Builder, loadedChunksOffset:flatbuffers.Offset, failedChunksOffset:flatbuffers.Offset, memoryUsage:bigint, loadTimeMs:number):flatbuffers.Offset {
  ChunkLoadResponse.startChunkLoadResponse(builder);
  ChunkLoadResponse.addLoadedChunks(builder, loadedChunksOffset);
  ChunkLoadResponse.addFailedChunks(builder, failedChunksOffset);
  ChunkLoadResponse.addMemoryUsage(builder, memoryUsage);
  ChunkLoadResponse.addLoadTimeMs(builder, loadTimeMs);
  return ChunkLoadResponse.endChunkLoadResponse(builder);
}
}
