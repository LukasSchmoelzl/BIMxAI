// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Chunk } from './chunk';


export class ChunkIndex {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChunkIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunkIndex(bb:flatbuffers.ByteBuffer, obj?:ChunkIndex):ChunkIndex {
  return (obj || new ChunkIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunkIndex(bb:flatbuffers.ByteBuffer, obj?:ChunkIndex):ChunkIndex {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChunkIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chunks(index: number, obj?:Chunk):Chunk|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Chunk()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

chunksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

totalEntities():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

totalSize():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 1;
}

static startChunkIndex(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addChunks(builder:flatbuffers.Builder, chunksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chunksOffset, 0);
}

static createChunksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChunksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTotalEntities(builder:flatbuffers.Builder, totalEntities:number) {
  builder.addFieldInt32(1, totalEntities, 0);
}

static addTotalSize(builder:flatbuffers.Builder, totalSize:bigint) {
  builder.addFieldInt64(2, totalSize, BigInt('0'));
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(3, createdAt, BigInt('0'));
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(4, version, 1);
}

static endChunkIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishChunkIndexBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedChunkIndexBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createChunkIndex(builder:flatbuffers.Builder, chunksOffset:flatbuffers.Offset, totalEntities:number, totalSize:bigint, createdAt:bigint, version:number):flatbuffers.Offset {
  ChunkIndex.startChunkIndex(builder);
  ChunkIndex.addChunks(builder, chunksOffset);
  ChunkIndex.addTotalEntities(builder, totalEntities);
  ChunkIndex.addTotalSize(builder, totalSize);
  ChunkIndex.addCreatedAt(builder, createdAt);
  ChunkIndex.addVersion(builder, version);
  return ChunkIndex.endChunkIndex(builder);
}
}
