// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Property } from '../../bim/fragment/property';


export class Entity {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Entity {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEntity(bb:flatbuffers.ByteBuffer, obj?:Entity):Entity {
  return (obj || new Entity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEntity(bb:flatbuffers.ByteBuffer, obj?:Entity):Entity {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Entity()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

expressId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

globalId():string|null
globalId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
globalId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

properties(index: number, obj?:Property):Property|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Property()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

propertiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

geometryId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startEntity(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addExpressId(builder:flatbuffers.Builder, expressId:number) {
  builder.addFieldInt32(0, expressId, 0);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addGlobalId(builder:flatbuffers.Builder, globalIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, globalIdOffset, 0);
}

static addProperties(builder:flatbuffers.Builder, propertiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, propertiesOffset, 0);
}

static createPropertiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPropertiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGeometryId(builder:flatbuffers.Builder, geometryId:number) {
  builder.addFieldInt32(5, geometryId, 0);
}

static endEntity(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEntity(builder:flatbuffers.Builder, expressId:number, typeOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset, globalIdOffset:flatbuffers.Offset, propertiesOffset:flatbuffers.Offset, geometryId:number):flatbuffers.Offset {
  Entity.startEntity(builder);
  Entity.addExpressId(builder, expressId);
  Entity.addType(builder, typeOffset);
  Entity.addName(builder, nameOffset);
  Entity.addGlobalId(builder, globalIdOffset);
  Entity.addProperties(builder, propertiesOffset);
  Entity.addGeometryId(builder, geometryId);
  return Entity.endEntity(builder);
}
}
