// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from '../../bim/fragment/vec3';


export class BoundingBox {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BoundingBox {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBoundingBox(bb:flatbuffers.ByteBuffer, obj?:BoundingBox):BoundingBox {
  return (obj || new BoundingBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBoundingBox(bb:flatbuffers.ByteBuffer, obj?:BoundingBox):BoundingBox {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BoundingBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

min(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

max(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBoundingBox(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addMin(builder:flatbuffers.Builder, minOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, minOffset, 0);
}

static addMax(builder:flatbuffers.Builder, maxOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, maxOffset, 0);
}

static endBoundingBox(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
