// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ChunkLoadRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChunkLoadRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunkLoadRequest(bb:flatbuffers.ByteBuffer, obj?:ChunkLoadRequest):ChunkLoadRequest {
  return (obj || new ChunkLoadRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunkLoadRequest(bb:flatbuffers.ByteBuffer, obj?:ChunkLoadRequest):ChunkLoadRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChunkLoadRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chunkIds(index: number):string
chunkIds(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
chunkIds(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

chunkIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

prefetch():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startChunkLoadRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addChunkIds(builder:flatbuffers.Builder, chunkIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chunkIdsOffset, 0);
}

static createChunkIdsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startChunkIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldInt8(1, priority, 0);
}

static addPrefetch(builder:flatbuffers.Builder, prefetch:boolean) {
  builder.addFieldInt8(2, +prefetch, +false);
}

static endChunkLoadRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChunkLoadRequest(builder:flatbuffers.Builder, chunkIdsOffset:flatbuffers.Offset, priority:number, prefetch:boolean):flatbuffers.Offset {
  ChunkLoadRequest.startChunkLoadRequest(builder);
  ChunkLoadRequest.addChunkIds(builder, chunkIdsOffset);
  ChunkLoadRequest.addPriority(builder, priority);
  ChunkLoadRequest.addPrefetch(builder, prefetch);
  return ChunkLoadRequest.endChunkLoadRequest(builder);
}
}
