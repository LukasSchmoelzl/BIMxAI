// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { CacheValueType } from './cache-value-type';
import { CompressionType } from './compression-type';


export class CacheEntry {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CacheEntry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCacheEntry(bb:flatbuffers.ByteBuffer, obj?:CacheEntry):CacheEntry {
  return (obj || new CacheEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCacheEntry(bb:flatbuffers.ByteBuffer, obj?:CacheEntry):CacheEntry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CacheEntry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

valueType():CacheValueType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CacheValueType.CLAUDE_REQUEST;
}

valueData(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

valueDataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

valueDataArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

expiresAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

hitCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

sizeBytes():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

compressionType():CompressionType {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : CompressionType.None;
}

tags(index: number):string
tags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
tags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

tagsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCacheEntry(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addValueType(builder:flatbuffers.Builder, valueType:CacheValueType) {
  builder.addFieldInt8(1, valueType, CacheValueType.CLAUDE_REQUEST);
}

static addValueData(builder:flatbuffers.Builder, valueDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueDataOffset, 0);
}

static createValueDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startValueDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(3, createdAt, BigInt('0'));
}

static addExpiresAt(builder:flatbuffers.Builder, expiresAt:bigint) {
  builder.addFieldInt64(4, expiresAt, BigInt('0'));
}

static addHitCount(builder:flatbuffers.Builder, hitCount:number) {
  builder.addFieldInt32(5, hitCount, 0);
}

static addSizeBytes(builder:flatbuffers.Builder, sizeBytes:number) {
  builder.addFieldInt32(6, sizeBytes, 0);
}

static addCompressionType(builder:flatbuffers.Builder, compressionType:CompressionType) {
  builder.addFieldInt8(7, compressionType, CompressionType.None);
}

static addTags(builder:flatbuffers.Builder, tagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, tagsOffset, 0);
}

static createTagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCacheEntry(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishCacheEntryBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedCacheEntryBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createCacheEntry(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, valueType:CacheValueType, valueDataOffset:flatbuffers.Offset, createdAt:bigint, expiresAt:bigint, hitCount:number, sizeBytes:number, compressionType:CompressionType, tagsOffset:flatbuffers.Offset):flatbuffers.Offset {
  CacheEntry.startCacheEntry(builder);
  CacheEntry.addKey(builder, keyOffset);
  CacheEntry.addValueType(builder, valueType);
  CacheEntry.addValueData(builder, valueDataOffset);
  CacheEntry.addCreatedAt(builder, createdAt);
  CacheEntry.addExpiresAt(builder, expiresAt);
  CacheEntry.addHitCount(builder, hitCount);
  CacheEntry.addSizeBytes(builder, sizeBytes);
  CacheEntry.addCompressionType(builder, compressionType);
  CacheEntry.addTags(builder, tagsOffset);
  return CacheEntry.endCacheEntry(builder);
}
}
