// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { EntityLocation } from './entity-location';
import { OctreeNode } from './octree-node';
import { SpatialIndex } from './spatial-index';


export class Octree {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Octree {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsOctree(bb:flatbuffers.ByteBuffer, obj?:Octree):Octree {
  return (obj || new Octree()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsOctree(bb:flatbuffers.ByteBuffer, obj?:Octree):Octree {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Octree()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

metadata(obj?:SpatialIndex):SpatialIndex|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new SpatialIndex()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

nodes(index: number, obj?:OctreeNode):OctreeNode|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new OctreeNode()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

nodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

entityLocations(index: number, obj?:EntityLocation):EntityLocation|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new EntityLocation()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

entityLocationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startOctree(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, metadataOffset, 0);
}

static addNodes(builder:flatbuffers.Builder, nodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nodesOffset, 0);
}

static createNodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addEntityLocations(builder:flatbuffers.Builder, entityLocationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, entityLocationsOffset, 0);
}

static createEntityLocationsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEntityLocationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endOctree(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishOctreeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedOctreeBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createOctree(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset, nodesOffset:flatbuffers.Offset, entityLocationsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Octree.startOctree(builder);
  Octree.addMetadata(builder, metadataOffset);
  Octree.addNodes(builder, nodesOffset);
  Octree.addEntityLocations(builder, entityLocationsOffset);
  return Octree.endOctree(builder);
}
}
