// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class TypeCount {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TypeCount {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTypeCount(bb:flatbuffers.ByteBuffer, obj?:TypeCount):TypeCount {
  return (obj || new TypeCount()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTypeCount(bb:flatbuffers.ByteBuffer, obj?:TypeCount):TypeCount {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TypeCount()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

entityType():string|null
entityType(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
entityType(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

count():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startTypeCount(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEntityType(builder:flatbuffers.Builder, entityTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, entityTypeOffset, 0);
}

static addCount(builder:flatbuffers.Builder, count:number) {
  builder.addFieldInt32(1, count, 0);
}

static endTypeCount(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTypeCount(builder:flatbuffers.Builder, entityTypeOffset:flatbuffers.Offset, count:number):flatbuffers.Offset {
  TypeCount.startTypeCount(builder);
  TypeCount.addEntityType(builder, entityTypeOffset);
  TypeCount.addCount(builder, count);
  return TypeCount.endTypeCount(builder);
}
}
