// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from './vec3';


export class EntityLocation {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EntityLocation {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEntityLocation(bb:flatbuffers.ByteBuffer, obj?:EntityLocation):EntityLocation {
  return (obj || new EntityLocation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEntityLocation(bb:flatbuffers.ByteBuffer, obj?:EntityLocation):EntityLocation {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EntityLocation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

entityId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

nodeId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

position(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startEntityLocation(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addEntityId(builder:flatbuffers.Builder, entityId:number) {
  builder.addFieldInt32(0, entityId, 0);
}

static addNodeId(builder:flatbuffers.Builder, nodeId:number) {
  builder.addFieldInt32(1, nodeId, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, positionOffset, 0);
}

static endEntityLocation(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
