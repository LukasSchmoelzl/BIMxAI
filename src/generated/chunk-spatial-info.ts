// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BoundingBox } from './bounding-box';


export class ChunkSpatialInfo {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChunkSpatialInfo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunkSpatialInfo(bb:flatbuffers.ByteBuffer, obj?:ChunkSpatialInfo):ChunkSpatialInfo {
  return (obj || new ChunkSpatialInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunkSpatialInfo(bb:flatbuffers.ByteBuffer, obj?:ChunkSpatialInfo):ChunkSpatialInfo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChunkSpatialInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

chunkId():string|null
chunkId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
chunkId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

bounds(obj?:BoundingBox):BoundingBox|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BoundingBox()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

entityCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

octreeNodes(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

octreeNodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

octreeNodesArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

priority():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startChunkSpatialInfo(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addChunkId(builder:flatbuffers.Builder, chunkIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, chunkIdOffset, 0);
}

static addBounds(builder:flatbuffers.Builder, boundsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, boundsOffset, 0);
}

static addEntityCount(builder:flatbuffers.Builder, entityCount:number) {
  builder.addFieldInt32(2, entityCount, 0);
}

static addOctreeNodes(builder:flatbuffers.Builder, octreeNodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, octreeNodesOffset, 0);
}

static createOctreeNodesVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createOctreeNodesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createOctreeNodesVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startOctreeNodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPriority(builder:flatbuffers.Builder, priority:number) {
  builder.addFieldFloat32(4, priority, 0.0);
}

static endChunkSpatialInfo(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
