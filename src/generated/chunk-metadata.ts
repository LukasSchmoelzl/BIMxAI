// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TypeCount } from './type-count';


export class ChunkMetadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ChunkMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunkMetadata(bb:flatbuffers.ByteBuffer, obj?:ChunkMetadata):ChunkMetadata {
  return (obj || new ChunkMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunkMetadata(bb:flatbuffers.ByteBuffer, obj?:ChunkMetadata):ChunkMetadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ChunkMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

entityCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

typeHistogram(index: number, obj?:TypeCount):TypeCount|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new TypeCount()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

typeHistogramLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

avgComplexity():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

hasGeometry():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

minExpressId():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

maxExpressId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startChunkMetadata(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addEntityCount(builder:flatbuffers.Builder, entityCount:number) {
  builder.addFieldInt32(0, entityCount, 0);
}

static addTypeHistogram(builder:flatbuffers.Builder, typeHistogramOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, typeHistogramOffset, 0);
}

static createTypeHistogramVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTypeHistogramVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addAvgComplexity(builder:flatbuffers.Builder, avgComplexity:number) {
  builder.addFieldFloat32(2, avgComplexity, 0.0);
}

static addHasGeometry(builder:flatbuffers.Builder, hasGeometry:boolean) {
  builder.addFieldInt8(3, +hasGeometry, +false);
}

static addMinExpressId(builder:flatbuffers.Builder, minExpressId:number) {
  builder.addFieldInt32(4, minExpressId, 0);
}

static addMaxExpressId(builder:flatbuffers.Builder, maxExpressId:number) {
  builder.addFieldInt32(5, maxExpressId, 0);
}

static endChunkMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChunkMetadata(builder:flatbuffers.Builder, entityCount:number, typeHistogramOffset:flatbuffers.Offset, avgComplexity:number, hasGeometry:boolean, minExpressId:number, maxExpressId:number):flatbuffers.Offset {
  ChunkMetadata.startChunkMetadata(builder);
  ChunkMetadata.addEntityCount(builder, entityCount);
  ChunkMetadata.addTypeHistogram(builder, typeHistogramOffset);
  ChunkMetadata.addAvgComplexity(builder, avgComplexity);
  ChunkMetadata.addHasGeometry(builder, hasGeometry);
  ChunkMetadata.addMinExpressId(builder, minExpressId);
  ChunkMetadata.addMaxExpressId(builder, maxExpressId);
  return ChunkMetadata.endChunkMetadata(builder);
}
}
