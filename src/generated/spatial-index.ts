// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BoundingBox } from './bounding-box';


export class SpatialIndex {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SpatialIndex {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSpatialIndex(bb:flatbuffers.ByteBuffer, obj?:SpatialIndex):SpatialIndex {
  return (obj || new SpatialIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSpatialIndex(bb:flatbuffers.ByteBuffer, obj?:SpatialIndex):SpatialIndex {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SpatialIndex()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rootNodeId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

totalNodes():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

totalEntities():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

maxDepth():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

leafNodeCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

nonEmptyLeafCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

entitiesPerLeaf():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 100;
}

bounds(obj?:BoundingBox):BoundingBox|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new BoundingBox()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 1;
}

static startSpatialIndex(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addRootNodeId(builder:flatbuffers.Builder, rootNodeId:number) {
  builder.addFieldInt32(0, rootNodeId, 0);
}

static addTotalNodes(builder:flatbuffers.Builder, totalNodes:number) {
  builder.addFieldInt32(1, totalNodes, 0);
}

static addTotalEntities(builder:flatbuffers.Builder, totalEntities:number) {
  builder.addFieldInt32(2, totalEntities, 0);
}

static addMaxDepth(builder:flatbuffers.Builder, maxDepth:number) {
  builder.addFieldInt8(3, maxDepth, 0);
}

static addLeafNodeCount(builder:flatbuffers.Builder, leafNodeCount:number) {
  builder.addFieldInt32(4, leafNodeCount, 0);
}

static addNonEmptyLeafCount(builder:flatbuffers.Builder, nonEmptyLeafCount:number) {
  builder.addFieldInt32(5, nonEmptyLeafCount, 0);
}

static addEntitiesPerLeaf(builder:flatbuffers.Builder, entitiesPerLeaf:number) {
  builder.addFieldInt16(6, entitiesPerLeaf, 100);
}

static addBounds(builder:flatbuffers.Builder, boundsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, boundsOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(8, createdAt, BigInt('0'));
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(9, version, 1);
}

static endSpatialIndex(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
